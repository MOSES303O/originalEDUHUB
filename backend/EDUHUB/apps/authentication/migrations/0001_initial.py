# Generated by Django 5.2.1 on 2025-07-21 10:40

import apps.core.utils
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserSelectedCourse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("is_applied", models.BooleanField(default=False)),
                ("application_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        db_index=True,
                        help_text="Session or JWT token identifier",
                        max_length=255,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="User's IP address"),
                ),
                ("user_agent", models.TextField(help_text="User's browser user agent")),
                (
                    "device_type",
                    models.CharField(
                        blank=True,
                        help_text="Device type (mobile, tablet, desktop)",
                        max_length=20,
                    ),
                ),
                (
                    "browser",
                    models.CharField(
                        blank=True, help_text="Browser name", max_length=50
                    ),
                ),
                (
                    "os",
                    models.CharField(
                        blank=True, help_text="Operating system", max_length=50
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, help_text="Country based on IP", max_length=50
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, help_text="City based on IP", max_length=100
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the session is currently active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Session creation time"
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True, help_text="Last activity timestamp"
                    ),
                ),
                (
                    "logout_time",
                    models.DateTimeField(
                        blank=True, help_text="Session logout time", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "db_table": "user_session",
            },
        ),
        migrations.CreateModel(
            name="UserSubject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "grade",
                    models.CharField(
                        choices=[
                            ("A", "A"),
                            ("A-", "A-"),
                            ("B+", "B+"),
                            ("B", "B"),
                            ("B-", "B-"),
                            ("C+", "C+"),
                            ("C", "C"),
                            ("C-", "C-"),
                            ("D+", "D+"),
                            ("D", "D"),
                            ("D-", "D-"),
                            ("E", "E"),
                        ],
                        help_text="Grade achieved in the subject",
                        max_length=2,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "User Subject",
                "verbose_name_plural": "User Subjects",
                "db_table": "user_subject",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        db_index=True,
                        help_text="User's email address (optional)",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        help_text="Kenyan phone number for login and notifications",
                        max_length=15,
                        unique=True,
                        validators=[apps.core.utils.validate_kenyan_phone],
                    ),
                ),
                (
                    "first_name",
                    models.CharField(help_text="User's first name", max_length=30),
                ),
                (
                    "last_name",
                    models.CharField(help_text="User's last name", max_length=30),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("is_premium", models.BooleanField(default=False)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "auth_user",
            },
        ),
        migrations.CreateModel(
            name="UserActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("USER_REGISTERED", "User Registered"),
                            ("USER_LOGIN", "User Login"),
                            ("USER_LOGOUT", "User Logout"),
                            ("PASSWORD_CHANGED", "Password Changed"),
                            ("PASSWORD_RESET_REQUESTED", "Password Reset Requested"),
                            ("PASSWORD_RESET_COMPLETED", "Password Reset Completed"),
                            ("EMAIL_VERIFIED", "Email Verified"),
                            ("PROFILE_UPDATED", "Profile Updated"),
                            ("PHONE_VERIFIED", "Phone Verified"),
                            ("PAYMENT_INITIATED", "Payment Initiated"),
                            ("PAYMENT_COMPLETED", "Payment Completed"),
                            ("PAYMENT_FAILED", "Payment Failed"),
                            ("SUBSCRIPTION_CREATED", "Subscription Created"),
                            ("SUBSCRIPTION_CANCELLED", "Subscription Cancelled"),
                            ("REFUND_REQUESTED", "Refund Requested"),
                            ("REFUND_PROCESSED", "Refund Processed"),
                            ("COURSE_VIEWED", "Course Viewed"),
                            ("COURSE_SELECTED", "Course Selected"),
                            ("COURSE_DESELECTED", "Course Deselected"),
                            ("APPLICATION_SUBMITTED", "Application Submitted"),
                            ("APPLICATION_UPDATED", "Application Updated"),
                            ("SUSPICIOUS_ACTIVITY", "Suspicious Activity"),
                            ("ACCOUNT_LOCKED", "Account Locked"),
                            ("ACCOUNT_UNLOCKED", "Account Unlocked"),
                            ("SESSION_REVOKED", "Session Revoked"),
                            ("SECURITY_ALERT", "Security Alert"),
                        ],
                        db_index=True,
                        help_text="Type of action performed",
                        max_length=50,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="When the action occurred",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(help_text="User's IP address"),
                ),
                (
                    "details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional details about the action",
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        default=True, help_text="Whether the action was successful"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if action failed"
                    ),
                ),
                (
                    "request_id",
                    models.CharField(
                        blank=True, help_text="Request ID for tracking", max_length=100
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Activity",
                "verbose_name_plural": "User Activities",
                "db_table": "user_activity",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, help_text="User's date of birth", null=True
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("M", "Male"),
                            ("F", "Female"),
                            ("O", "Other"),
                            ("", "Prefer not to say"),
                        ],
                        help_text="User's gender",
                        max_length=1,
                    ),
                ),
                (
                    "county",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("nairobi", "Nairobi"),
                            ("mombasa", "Mombasa"),
                            ("kisumu", "Kisumu"),
                            ("nakuru", "Nakuru"),
                            ("eldoret", "Eldoret"),
                            ("thika", "Thika"),
                            ("malindi", "Malindi"),
                            ("kitale", "Kitale"),
                            ("garissa", "Garissa"),
                            ("kakamega", "Kakamega"),
                            ("other", "Other"),
                        ],
                        help_text="User's county of residence",
                        max_length=20,
                    ),
                ),
                (
                    "preferred_study_mode",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("full_time", "Full Time"),
                            ("part_time", "Part Time"),
                            ("online", "Online"),
                            ("hybrid", "Hybrid"),
                        ],
                        help_text="Preferred mode of study",
                        max_length=20,
                    ),
                ),
                (
                    "preferred_location",
                    models.CharField(
                        blank=True, help_text="Preferred study location", max_length=100
                    ),
                ),
                (
                    "career_interests",
                    models.TextField(
                        blank=True, help_text="User's career interests and goals"
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="User's profile picture",
                        null=True,
                        upload_to="avatars/",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True, help_text="User's biography", max_length=500
                    ),
                ),
                (
                    "email_notifications",
                    models.BooleanField(
                        default=True, help_text="Receive email notifications"
                    ),
                ),
                (
                    "sms_notifications",
                    models.BooleanField(
                        default=False, help_text="Receive SMS notifications"
                    ),
                ),
                (
                    "marketing_emails",
                    models.BooleanField(
                        default=False, help_text="Receive marketing emails"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
                "db_table": "user_profile",
            },
        ),
    ]
