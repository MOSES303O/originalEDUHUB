# Generated by Django 5.2.1 on 2025-06-06 07:40

import apps.payments.models
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SubscriptionPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the subscription plan",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed description of the plan"
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price of the subscription in KES",
                        max_digits=10,
                    ),
                ),
                (
                    "duration_days",
                    models.PositiveIntegerField(
                        help_text="Duration of the plan in days"
                    ),
                ),
                (
                    "features",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON object describing features included in the plan",
                    ),
                ),
                (
                    "max_course_selections",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Maximum number of courses a user can select under this plan",
                    ),
                ),
                (
                    "max_applications",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Maximum number of course applications allowed under this plan",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this plan is currently active and available for users",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="subscription creation time",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="Last update time"),
                ),
            ],
            options={
                "verbose_name": "Subscription Plan",
                "verbose_name_plural": "Subscription Plans",
                "db_table": "subscription_plan",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Payment creation time",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="Last update time"),
                ),
                (
                    "plan",
                    models.CharField(
                        choices=[
                            ("basic", "Basic Plan"),
                            ("premium", "Premium Plan"),
                            ("pro", "Pro Plan"),
                            ("enterprise", "Enterprise Plan"),
                        ],
                        help_text="Subscription plan",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("cancelled", "Cancelled"),
                            ("expired", "Expired"),
                            ("suspended", "Suspended"),
                        ],
                        db_index=True,
                        default="inactive",
                        help_text="Subscription status",
                        max_length=20,
                    ),
                ),
                (
                    "billing_cycle",
                    models.CharField(
                        choices=[
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                            ("lifetime", "Lifetime"),
                        ],
                        help_text="Billing cycle",
                        max_length=20,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Subscription amount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="KES", help_text="Subscription currency", max_length=3
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(help_text="Subscription start date"),
                ),
                ("end_date", models.DateTimeField(help_text="Subscription end date")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserSubscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        default=apps.payments.models.UserSubscription.get_today,
                        help_text="Subscription start date",
                    ),
                ),
                ("end_date", models.DateField(help_text="Subscription end date")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Is this subscription currently active?"
                    ),
                ),
                (
                    "amount_paid",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount paid for the subscription",
                        max_digits=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "subscription_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Type of subscription the user has",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payments.subscription",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Subscription",
                "verbose_name_plural": "User Subscriptions",
                "db_table": "user_subscription",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reference_number",
                    models.CharField(
                        db_index=True,
                        help_text="Unique payment reference number",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "external_reference",
                    models.CharField(
                        blank=True,
                        help_text="External payment gateway reference",
                        max_length=100,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Payment amount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="KES", help_text="Payment currency", max_length=3
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("mpesa", "M-Pesa"),
                            ("card", "Credit/Debit Card"),
                            ("bank_transfer", "Bank Transfer"),
                            ("paypal", "PayPal"),
                            ("other", "Other"),
                        ],
                        help_text="Payment method used",
                        max_length=20,
                    ),
                ),
                (
                    "payment_type",
                    models.CharField(
                        choices=[
                            ("subscription", "Subscription"),
                            ("course_fee", "Course Fee"),
                            ("application_fee", "Application Fee"),
                            ("consultation", "Consultation"),
                            ("other", "Other"),
                        ],
                        help_text="Type of payment",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("refunded", "Refunded"),
                            ("expired", "Expired"),
                        ],
                        db_index=True,
                        default="pending",
                        help_text="Current payment status",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(help_text="Payment description")),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Phone number for M-Pesa payments",
                        max_length=15,
                    ),
                ),
                (
                    "mpesa_receipt_number",
                    models.CharField(
                        blank=True, help_text="M-Pesa receipt number", max_length=50
                    ),
                ),
                (
                    "mpesa_transaction_id",
                    models.CharField(
                        blank=True, help_text="M-Pesa transaction ID", max_length=50
                    ),
                ),
                (
                    "gateway_response",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Payment gateway response data",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Payment creation time",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="Last update time"),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="Payment completion time", null=True
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="Payment expiration time", null=True
                    ),
                ),
                (
                    "next_billing_date",
                    models.DateTimeField(
                        blank=True, help_text="Next billing date", null=True
                    ),
                ),
                (
                    "auto_renew",
                    models.BooleanField(
                        default=True, help_text="Whether subscription auto-renews"
                    ),
                ),
                (
                    "cancelled_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Subscription cancellation date",
                        null=True,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="User's IP address during payment",
                        null=True,
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, help_text="User's browser user agent"),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional payment metadata",
                    ),
                ),
                (
                    "last_payment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Last payment for this subscription",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subscription_payments",
                        to="payments.payment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_subscription",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related user subscription",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="payments",
                        to="payments.usersubscription",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment",
                "verbose_name_plural": "Payments",
                "db_table": "payment",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentCallback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "checkout_request_id",
                    models.CharField(
                        db_index=True,
                        help_text="Unique ID from the payment gateway (e.g. M-Pesa CheckoutRequestID)",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "result_code",
                    models.IntegerField(
                        help_text="Result code from the gateway (0 = success)"
                    ),
                ),
                (
                    "result_description",
                    models.TextField(
                        help_text="Human-readable description of the result"
                    ),
                ),
                (
                    "raw_payload",
                    models.JSONField(
                        help_text="Full raw JSON payload received from the gateway"
                    ),
                ),
                (
                    "processed_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Parsed/processed fields from the raw payload",
                    ),
                ),
                (
                    "is_processed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this callback has been fully handled",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message during processing, if any"
                    ),
                ),
                (
                    "received_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="When the callback was received",
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the callback was processed",
                        null=True,
                    ),
                ),
                (
                    "payment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Payment linked to this callback, if matched",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="callbacks",
                        to="payments.payment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Callback",
                "verbose_name_plural": "Payment Callbacks",
                "db_table": "payment_callback",
                "ordering": ["-received_at"],
                "indexes": [
                    models.Index(
                        fields=["checkout_request_id"],
                        name="payment_cal_checkou_b8f8ba_idx",
                    ),
                    models.Index(
                        fields=["result_code"], name="payment_cal_result__e459a3_idx"
                    ),
                    models.Index(
                        fields=["received_at"], name="payment_cal_receive_aa5f1a_idx"
                    ),
                    models.Index(
                        fields=["is_processed"], name="payment_cal_is_proc_0bf501_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PaymentWebhook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "webhook_id",
                    models.CharField(
                        db_index=True,
                        help_text="Unique webhook identifier",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        help_text="Webhook source (mpesa, paypal, etc.)", max_length=50
                    ),
                ),
                (
                    "event_type",
                    models.CharField(help_text="Type of webhook event", max_length=50),
                ),
                ("raw_data", models.JSONField(help_text="Raw webhook data")),
                (
                    "processed_data",
                    models.JSONField(
                        blank=True, default=dict, help_text="Processed webhook data"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("received", "Received"),
                            ("processing", "Processing"),
                            ("processed", "Processed"),
                            ("failed", "Failed"),
                            ("ignored", "Ignored"),
                        ],
                        db_index=True,
                        default="received",
                        help_text="Webhook processing status",
                        max_length=20,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if processing failed"
                    ),
                ),
                (
                    "received_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Webhook received time",
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True, help_text="Webhook processed time", null=True
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="Source IP address", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User agent from webhook request"
                    ),
                ),
                (
                    "payment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Related payment if found",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="webhooks",
                        to="payments.payment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Webhook",
                "verbose_name_plural": "Payment Webhooks",
                "db_table": "payment_webhook",
                "ordering": ["-received_at"],
                "indexes": [
                    models.Index(
                        fields=["webhook_id"], name="payment_web_webhook_dfdf7e_idx"
                    ),
                    models.Index(
                        fields=["source", "event_type"],
                        name="payment_web_source_541954_idx",
                    ),
                    models.Index(
                        fields=["status"], name="payment_web_status_31b90d_idx"
                    ),
                    models.Index(
                        fields=["received_at"], name="payment_web_receive_302c86_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["user", "status"], name="payment_user_id_f8d8a8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["reference_number"], name="payment_referen_ac4675_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["payment_method"], name="payment_payment_d8e241_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["created_at"], name="payment_created_6be7be_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["status", "created_at"], name="payment_status_271abe_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["next_billing_date"], name="payment_next_bi_a2506f_idx"
            ),
        ),
    ]
